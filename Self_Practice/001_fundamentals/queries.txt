1.) What is uintptr?
2.) What is and not &^ operatror?
3.) How to do this for float? You also have the option to write them in hexadecimal by using the 0x prefix and the letter p for indicating any exponent.
4.) Explain why intSet[v] = struct{}{} in following code?
    func MapAsSetWithStruct() {
        intSet := map[int]struct{}{}
        vals := []int{5, 10, 2, 5, 8, 7, 3, 9, 1, 2, 10}
        for _, v := range vals {
            intSet[v] = struct{}{}
        }
        if _, ok := intSet[5]; ok {
            fmt.Println("5 is in the set")
        }
    }
5.)Book says f and s can be typecasted butg not compared. Not working in compile time?:
    type firstPerson struct {
		name string
		age  int
	}
	type secondPerson struct {
		name string
		age  int
	}
	f := firstPerson{
		age:  30,
		name: "Soni",
	}
	s := secondPerson{
		age:  30,
		name: "Komal",
	}
	//f = s
6.) g := struct {
		name string
		age  int
	}{
		name: "Fido",
		age:  20,
	} works fine. Why not?

7.) Did not understand output of following program?
func TestPointers() {
	var x int32 = 10
	var y bool = true
	var z string = "A"
	pointerX := &x
	pointerY := &y
	pointerZ := &z
	fmt.Println(pointerX)
	fmt.Println(pointerY)
	fmt.Println(pointerZ)
	fmt.Println(&pointerX)
	fmt.Println(&pointerY)
	fmt.Println(&pointerZ)
}
D:\golang_repo\Self_Practice\001_fundamentals>hello.exe
0xc00000a0f8
0xc00000a0fc
0xc0000260a0
0xc000092050
0xc000092058
0xc000092060

8.) go run -race main.go shows no race conditions to me:
package concurrency

//https://github.com/Diwakarsingh052/genspark/blob/main/12-concurrency/4-races.go
// While running race flag, it requires to set CGO_ENABLED = 0 and follow https://code.visualstudio.com/docs/cpp/config-mingw for mingw installation
import (
	"fmt"
	"sync"
)

// go run -race 4-races.go // run your program with race detector
// it should be used in dev environment, not in production
var x int = 1

// create a data-race for the map and detect with race detector
//var user map[int]string

func TestMutex() {
	wg := new(sync.WaitGroup)
	m := new(sync.Mutex)
	//wg.Add(10)
	for i := 1; i <= 5; i++ {
		wg.Add(2)
		go updateX(i, wg, m)
		go UpdateLocal(i, wg)
	}
	wg.Wait()
}

func updateX(val int, wg *sync.WaitGroup, m *sync.Mutex) {
	defer wg.Done()
	// critical section
	// this is the place where we access the shared resource

	// when a goroutine acquires a lock, another goroutine can't access the critical section
	// until the lock is not released

	//if we don't protect critical section with locks then data race can happen
	//if any goroutine tries to write to the shared resource

	// data race situations
	//	- at least one concurrent write and n number of reads
	//	- n number of concurrent writes
	// 	- n number of concurrent writes and n number of concurrent reads
	// 	Note - Data race doesn't happen if there are only concurrent reads
	//m.Lock()
	//defer m.Unlock() // releasing the lock
	fmt.Println(m)
	x = val
	fmt.Println(x)

}

func UpdateLocal(val int, wg *sync.WaitGroup) {
	defer wg.Done()
	var abc int // abc is a local variable //
	// if we run 10 goroutines, then 10 stack frames would be created,
	// every update would happen in the local stack frame, nothing shared with other goroutines
	fmt.Println(abc)
	abc = val
	fmt.Println(abc)
}
